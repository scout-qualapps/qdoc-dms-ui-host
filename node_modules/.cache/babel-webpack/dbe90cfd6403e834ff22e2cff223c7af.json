{"ast":null,"code":"import { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/material/tooltip\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/tree\";\nimport * as i6 from \"@angular/common\";\n\nconst _c0 = function (a0) {\n  return {\n    \"active\": a0\n  };\n};\n\nconst _c1 = function (a0) {\n  return {\n    \"color\": a0\n  };\n};\n\nfunction MoveCopyModalComponent_mat_tree_node_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 10);\n    i0.ɵɵlistener(\"click\", function MoveCopyModalComponent_mat_tree_node_11_Template_mat_tree_node_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const node_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.activeNode = node_r2;\n    });\n    i0.ɵɵelement(1, \"button\", 11);\n    i0.ɵɵelementStart(2, \"mat-icon\", 12);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c0, ctx_r0.activeNode === node_r2));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(6, _c1, node_r2.folderColor));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r2.iconName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", node_r2.name, \" \");\n  }\n}\n\nfunction MoveCopyModalComponent_mat_tree_node_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 13);\n    i0.ɵɵlistener(\"click\", function MoveCopyModalComponent_mat_tree_node_12_Template_mat_tree_node_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const node_r5 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.activeNode = node_r5;\n    });\n    i0.ɵɵelementStart(1, \"button\", 14);\n    i0.ɵɵelementStart(2, \"mat-icon\", 15);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-icon\", 16);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx_r1.activeNode === node_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r5.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.isExpanded(node_r5) ? \"remove\" : \"add\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", node_r5.class)(\"ngStyle\", i0.ɵɵpureFunction1(9, _c1, node_r5.folderColor));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r5.iconName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", node_r5.name, \" \");\n  }\n}\n\nconst TREE_DATA = [{\n  name: 'Repository 1',\n  iconName: 'repo',\n  class: 'repo-icon',\n  folderColor: '',\n  children: [{\n    name: 'Folder 1',\n    iconName: 'folder',\n    class: 'folder-icon',\n    folderColor: 'red',\n    children: [{\n      name: 'Folder 1.1',\n      iconName: 'folder',\n      class: 'folder-icon',\n      folderColor: 'green'\n    }]\n  }, {\n    name: 'Folder 2',\n    iconName: 'folder',\n    class: 'folder-icon',\n    folderColor: '',\n    children: [{\n      name: 'Folder 2.1',\n      iconName: 'folder',\n      class: 'folder-icon',\n      folderColor: ''\n    }]\n  }, {\n    name: 'Folder 3',\n    iconName: 'folder',\n    class: 'folder-icon',\n    folderColor: 'blue',\n    children: [{\n      name: 'Folder 3.1',\n      iconName: 'folder',\n      class: 'folder-icon',\n      folderColor: '',\n      children: [{\n        name: 'Folder 3.1.1',\n        iconName: 'folder',\n        class: 'folder-icon',\n        folderColor: ''\n      }]\n    }, {\n      name: 'Folder 3.2',\n      iconName: 'folder',\n      class: 'folder-icon',\n      folderColor: '',\n      children: [{\n        name: 'Folder 3.2.1',\n        iconName: 'folder',\n        class: 'folder-icon',\n        folderColor: ''\n      }]\n    }]\n  }]\n}, {\n  name: 'Repository 2',\n  iconName: 'repo-icon',\n  class: 'repo-icon',\n  folderColor: '',\n  children: [{\n    name: 'Folder 2.1',\n    iconName: 'folder',\n    class: 'folder-icon',\n    folderColor: ''\n  }]\n}, {\n  name: 'Repository 3',\n  iconName: '',\n  class: 'repo-icon',\n  folderColor: '',\n  children: [{\n    name: 'Folder 3.1',\n    iconName: 'folder',\n    class: 'folder-icon',\n    folderColor: ''\n  }]\n}];\nexport let MoveCopyModalComponent = /*#__PURE__*/(() => {\n  class MoveCopyModalComponent {\n    constructor() {\n      this._transformer = (node, level) => {\n        return {\n          expandable: !!node.children && node.children.length > 0,\n          name: node.name,\n          level: level,\n          iconName: node.iconName,\n          class: node.class,\n          folderColor: node.folderColor\n        };\n      };\n\n      this.treeControl = new FlatTreeControl(node => node.level, node => node.expandable);\n      this.treeFlattener = new MatTreeFlattener(this._transformer, node => node.level, node => node.expandable, node => node.children);\n      this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n      this.hasChild = (_, node) => node.expandable;\n\n      this.dataSource.data = TREE_DATA;\n    }\n\n  }\n\n  MoveCopyModalComponent.ɵfac = function MoveCopyModalComponent_Factory(t) {\n    return new (t || MoveCopyModalComponent)();\n  };\n\n  MoveCopyModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MoveCopyModalComponent,\n    selectors: [[\"app-move-copy\"]],\n    decls: 18,\n    vars: 4,\n    consts: [[\"mat-dialog-title\", \"\", 1, \"has-close-icon\"], [\"mat-button\", \"\", \"matTooltip\", \"Close\", \"mat-dialog-close\", \"\", 1, \"icon-button\"], [1, \"sub-breadcrumb\", \"rounded\", \"mb-3\"], [1, \"fw-bold\"], [1, \"app-tree-view\", 3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\", 3, \"ngClass\", \"click\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 3, \"ngClass\", \"click\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"align\", \"end\"], [\"mat-button\", \"\", \"mat-dialog-close\", \"\", 1, \"secondary-button\", \"me-2\"], [\"mat-button\", \"\", \"cdkFocusInitial\", \"\", 1, \"primary-button\", 3, \"mat-dialog-close\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\", 3, \"ngClass\", \"click\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [3, \"ngStyle\"], [\"matTreeNodePadding\", \"\", 3, \"ngClass\", \"click\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [3, \"ngClass\", \"ngStyle\"]],\n    template: function MoveCopyModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵtext(1, \"Move To / Copy To \");\n        i0.ɵɵelementStart(2, \"button\", 1);\n        i0.ɵɵelementStart(3, \"mat-icon\");\n        i0.ɵɵtext(4, \"close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-dialog-content\");\n        i0.ɵɵelementStart(6, \"div\", 2);\n        i0.ɵɵtext(7, \"Select the target path to move \");\n        i0.ɵɵelementStart(8, \"span\", 3);\n        i0.ɵɵtext(9, \"\\\"File name.pdf / Folder name\\\"\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-tree\", 4);\n        i0.ɵɵtemplate(11, MoveCopyModalComponent_mat_tree_node_11_Template, 5, 8, \"mat-tree-node\", 5);\n        i0.ɵɵtemplate(12, MoveCopyModalComponent_mat_tree_node_12_Template, 7, 11, \"mat-tree-node\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-dialog-actions\", 7);\n        i0.ɵɵelementStart(14, \"button\", 8);\n        i0.ɵɵtext(15, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 9);\n        i0.ɵɵtext(17, \"Move\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"mat-dialog-close\", true);\n      }\n    },\n    directives: [i1.MatDialogTitle, i2.MatButton, i3.MatTooltip, i1.MatDialogClose, i4.MatIcon, i1.MatDialogContent, i5.MatTree, i5.MatTreeNodeDef, i1.MatDialogActions, i5.MatTreeNode, i5.MatTreeNodeToggle, i5.MatTreeNodePadding, i6.NgClass, i6.NgStyle],\n    styles: [\"\"]\n  });\n  return MoveCopyModalComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}